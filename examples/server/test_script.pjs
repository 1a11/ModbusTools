<?xml version="1.0" encoding="UTF-8"?>
<project version="0.4.0" editnum="9">
    <name>TestScript</name>
    <author>serhmarch</author>
    <comment>Server project for script testing</comment>
    <ports>
        <port>
            <parity>No</parity>
            <name>PORT</name>
            <stopBits>1</stopBits>
            <flowControl>No</flowControl>
            <serialPortName>#TEST</serialPortName>
            <port>502</port>
            <timeoutFirstByte>1000</timeoutFirstByte>
            <dataBits>8</dataBits>
            <baudRate>9600</baudRate>
            <timeoutInterByte>50</timeoutInterByte>
            <host>localhost</host>
            <timeout>3000</timeout>
            <type>RTU</type>
            <deviceref>
                <deviceref name="PLC">1</deviceref>
            </deviceref>
        </port>
    </ports>
    <devices>
        <device>
            <byteArrayFormat>Hex</byteArrayFormat>
            <byteArraySeparator>\s</byteArraySeparator>
            <byteOrder>LessSignifiedFirst</byteOrder>
            <count0x>65535</count0x>
            <count1x>65534</count1x>
            <count3x>65533</count3x>
            <count4x>65532</count4x>
            <delay>0</delay>
            <exceptionStatusAddress>300001</exceptionStatusAddress>
            <isReadOnly>false</isReadOnly>
            <isSaveData>false</isSaveData>
            <maxReadCoils>2040</maxReadCoils>
            <maxReadDiscreteInputs>2040</maxReadDiscreteInputs>
            <maxReadHoldingRegisters>127</maxReadHoldingRegisters>
            <maxReadInputRegisters>127</maxReadInputRegisters>
            <maxWriteMultipleCoils>127</maxWriteMultipleCoils>
            <maxWriteMultipleRegisters>127</maxWriteMultipleRegisters>
            <name>PLC</name>
            <registerOrder>R0R1R2R3</registerOrder>
            <scriptInit># Objects for access corresponding device memory: mem0x, mem1x, mem3x, mem4x.
#
# Every object has set of get/set function to work with different data types:
#  * mem0x, mem1x: `get&lt;datatype&gt;(bitoffset:int)-&gt;(int, float)` and `set&lt;datatype&gt;(bitoffset:int,value:(int, float))`
#  * mem3x, mem4x: `get&lt;datatype&gt;(regoffset:int)-&gt;(int, float)` and `set&lt;datatype&gt;(regoffset:int,value:(int, float))`
#
# &lt;datatype&gt;: int8, uint8, int16, uint16, int32, uint32, int64, uint64, float, double.
#
# Examples:
#  v = mem0x.getint8(0)
#  mem1x.setint16(1, -1)
#  mem3x.setuint16(0, 65535)
#  mem3x.setfloat(0, 3.14)
#  mem4x.setdouble(10, 2.71828)

mems = (mem0x, mem1x, mem3x, mem4x)

lsoffset = [0,1,15,16,32,33,34,100]
for mem in mems:
    print(f&quot;mem{mem.getid()}x test begins...&quot;)
    lsfunc = []
    lsfunc.append([mem.getint8  , mem.setint8  , -1])
    lsfunc.append([mem.getuint8 , mem.setuint8 , 0x81])
    lsfunc.append([mem.getint16 , mem.setint16 , -1])
    lsfunc.append([mem.getuint16, mem.setuint16, 0x8001])
    lsfunc.append([mem.getint32 , mem.setint32 , -1])
    lsfunc.append([mem.getuint32, mem.setuint32, 0x80000001])
    lsfunc.append([mem.getint64 , mem.setint64 , -1])
    lsfunc.append([mem.getuint64, mem.setuint64, 0x8000000000000001])

    for getmethod, setmethod, value in lsfunc:
        for offset in lsoffset:
            setmethod(offset, value)
            if getmethod(offset) != value:
                print(f&quot;Error: mem{mem.getid()}x method ({str(setmethod)})&quot;)
</scriptInit>
            <stringEncoding>UTF-8</stringEncoding>
            <stringLengthType>ZerroEnded</stringLengthType>
        </device>
    </devices>
    <windows>070000006465763a504c43000000003f030000000000003d0300005002000008000000696e69743a504c430800000000000000000000003f03000050020000</windows>
</project>
